#! /bin/bash

cd /app

DOT="dot/state-diagram.dot"

echo "">states
echo "">relations
echo "">state-funcs
echo "">$DOT


cat pkg/game/state_functions.go |grep -A2 "Trigger States:"| \
    sed "s/() {//g"|sed "s/^func //g"|sed "s/^\\/\\/ [RT].*: //g"| \
    sed "s/,//g"|egrep -v "\-\-" |tac | \
while mapfile -t -n3 fnc && ((${#fnc[@]}));do
    # states contains multiple trigger and resulting states - we want to de-dupe these before
    # we describe their properties
    echo ${fnc[1]} ${fnc[2]}>> states

    # relations holds the mapping of nodes
    echo -e "    ${fnc[0]} [shape="'"'"box"'"'"]" >> state-funcs
    echo -e "    {" ${fnc[2]} "} -> ${fnc[0]} -> {" ${fnc[1]} "}" >>relations
done

# Generate the .dot file
echo -e "
#
# This file is created through the execution of graph-game
# do not edit this file.
#
# Copyright (c) Matthew Peters, 2023
#
digraph {
    labelloc=t
    fontsize=20
    label="'"'"goJack State Machine Game Flow"'"'"
    rankdir="'"TB"'"" >$DOT


# de-dupe the states into the .dot file
cat states|sed "s/ /\n/g"|egrep -v "^$"|sed "s/^/    /g"|sed "s/$/ \\[shape=\\\"parallelogram\\\"\\]/g"|sort -ur>>state-diagram.dot
cat state-funcs >> $DOT
cat relations >> $DOT
echo "}" >>$DOT

# Generate the .png image
cat $DOT | dot -Tpng > images/game-states.png

# Cleanup
rm {state-funcs,states,relations}
